{"version":3,"sources":["serviceWorker.js","Loader/Loader.js","index.js"],"names":["Boolean","window","location","hostname","match","className","PLACES","name","zip","App","props","onCityClick","e","document","getElementById","style","visibility","setState","activePlace","getLocationAndWeather","state","Geolocation","getCurrentPosition","info","console","log","this","navigator","geolocation","position","latitude","coords","longitude","units","url","require","fetchJsonp","then","response","json","weather","iconUrl","icon","deg","main","temp","summary","altIcon","description","windSpeed","wind","speed","feels_like","Math","round","href","Container","Row","Col","md","sm","Nav","bsStyle","stacked","activeKey","onSelect","index","map","place","key","type","onClick","id","src","alt","onDegClick","bind","class","data-property","loop","muted","autoPlay","poster","React","Component","Footer","target","ReactDOM","render"],"mappings":"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","file":"static/js/main.3178e3b0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styles from './Loader.css';\n\n\t\t//ready-made module from loading.io\nexport default () => <div className=\"lds-ring\" />\n","import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Geolocation from '@react-native-community/geolocation';\nimport \"bootswatch/dist/litera/bootstrap.css\";\nimport Loader from './Loader/Loader.js';\nimport { Navbar, NavItem, Nav, Container , Row, Col } from \"react-bootstrap\";\n// ReactDOM.render(\n//\t <React.StrictMode>\n//\t\t <App />\n//\t </React.StrictMode>,\n//\t document.getElementById('root')\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nconst PLACES = [\n\t{ name: \"My location\", zip: \"0\"},\n\t{ name: \"Cheboksary\", zip: \"569696\" },\n\t{ name: \"New York\", zip: \"94088\" },\n\t{ name: \"Hong Kong\", zip: \"95062\" },\n\t{ name: \"Doha\", zip: \"95062\" },\n\t{ name: \"Moscow\", zip: \"95062\" },\n\t{ name: \"Sydney\", zip: \"96803\" }\n];\n\n\nclass App extends React.Component {\n\t\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\t'activePlace': 'Moscow',\n\t\t\t'weather': {},\n\t\t\t'units': 'metric'\n\t\t}\n\t\tGeolocation.getCurrentPosition(info => console.log(info));\n\t\t// jQuery(function(){\n\t //      jQuery(\"#[playerID]\").YTPlayer();\n\t //    });\n\t}\n\t\n\tcomponentDidMount(){\t\t\n\t\t// navigator.geolocation = require('@react-native-community/geolocation');\n\t\tthis.getLocationAndWeather();\n\t}\n\t\n\tgetLocationAndWeather() {\n\t\tif (\"geolocation\" in navigator) {\t\t\t\n\t\t\tnavigator.geolocation.getCurrentPosition( (position) => {\n\t\t\t\tlet latitude = position.coords.latitude\n\t\t\t\tlet longitude = position.coords.longitude\n\t\t\t\t// let latitude = 35\n\t\t\t\t// let longitude = 56\n\t\t\t\tlet units = this.state.units;\n\t\t\t\t// let location = latitude + \",\" + longitude + \"?units=\" + units\n\t\t\t\t// let fetchJsonp = require(\"fetch-jsonp\");\n\t\t\t\t// //darkSky\n\t\t\t\t// let url = \"https://api.darksky.net/forecast/04c3762b193aaee40affb899992cef3e/\" + location\n\t\t\t\t// fetchJsonp(url).then( (response) => response.json().then( (json) => this.setState({weather: json}) ) )\n\n\n\n\t\t\t\t// https://api.darksky.net/forecast/04c3762b193aaee40affb899992cef3e/55.7522,37.6156\n\n\t\t\t\t// http://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=f8cfda0ca4b8ccfef50bf143d6133107&units=imperial\n\t\t\t\t// Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.\n\n\t\t\t\t//openWeather\n\t\t\t\t// http://api.openweathermap.org/data/2.5/weather?lat=55.7522&lon=37.6156&appid=f8cfda0ca4b8ccfef50bf143d6133107&units=metric\n\n\t\t\t\tlet location = (this.state.activePlace === \"My location\"\n\t\t\t\t\t\t\t\t\t?  `lat=${latitude}&lon=${longitude}`\n\t\t\t\t\t\t\t\t\t: `q=${this.state.activePlace}`)\n\t\t\t\tlet url = `http://api.openweathermap.org/data/2.5/weather?${location}&appid=f8cfda0ca4b8ccfef50bf143d6133107&units=${units}`;\n\t\t\t\tlet fetchJsonp = require(\"fetch-jsonp\");\n\t\t\t\tfetchJsonp(url).then( (response) => response.json().then( (json) => {this.setState({weather: json, activePlace: json.name});console.log(json.name);} ) )\n\t\t\t\t// console.log(this.state.weather);\n\t\t\t})\n\t\t}\n\t}\n\t\n\tonDegClick(){\n\t\tthis.state.units == 'metric'\n\t\t\t? this.setState({units: 'imperial'})\n\t\t\t: this.setState({units: 'metric'});\n\t\tthis.getLocationAndWeather();\n\t\tconsole.log('Clicked!');\n\t\tdocument.getElementById('subtitleHandler').style.visibility='hidden';\n\t\n\n\t\t// https://robwu.nl/cors-anywhere.html\n\t\t// https://cors-anywhere.herokuapp.com/\n\t\t// https://github.com/Rob--W/cors-anywhere/#documentation\n\n\t\t// https://cloud.yandex.ru/docs/translate/api-ref/Translation/translate#responses\n\n\t\t// https://cloud.yandex.ru/docs/cli/quickstart#install\n\t\t// https://cloud.yandex.ru/docs/iam/operations/iam-token/create\n\n\t// \tfetch('https://cors-anywhere.herokuapp.com/translate.api.cloud.yandex.net/translate/v2/translate', {\n\t// \tmethod: 'POST',\n\t\t// body: JSON.stringify({\n\t\t// \t\"sourceLanguageCode\": \"en\",\n\t\t// \t\"targetLanguageCode\": \"ru\",\n\t\t// \t\"format\": \"PLAIN_TEXT\",\n\t\t// \t\"texts\": [\n\t\t// \t\t\"string\"\n\t\t// \t],\n\t\t\t\n\t\t\t\n\t\t// }),\n\t\t\n\t// \t})\n\t// \t.then(response => response.json())\n\t// \t.then(json => console.log(json))\n\t}\n\n\n\tonCityClick = (e, name) => {\n\t\tif (name !== 'My location') { \n\t\t\tdocument.getElementById('subtitleHandler').style.visibility='hidden';\n\t\t}\n\t\tthis.setState({\n\t\t\tactivePlace : name\n\t\t}, () => {\n\t\t\t\tthis.getLocationAndWeather();\n\t\t\t});\n\t\t// console.log(name);\n\t}\n\t\n\trender(){\n\t\t\n\t\tlet title = 'Weather App'\n\t\tlet subtitle = 'The weather outside your window...'\n\t\tif (!this.state.weather.weather) return <Loader />;\n\t\t// const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n\n\t\tlet iconUrl = this.state.weather.weather && this.state.weather.weather[0].icon\n\t\t\t? `http://openweathermap.org/img/w/${this.state.weather.weather[0].icon}.png`\n\t\t\t: ''\n\t\t\n\t\tlet deg = this.state.weather.main && this.state.weather.main.temp \n\t\t\t? this.state.weather.main.temp \n\t\t\t: ''\n\t\t\n\t\tlet summary = this.state.weather.weather && this.state.weather.weather[0].main\n\t\t\t? this.state.weather.weather[0].main\n\t\t\t: ''\n\n\t\tlet altIcon = this.state.weather.weather && this.state.weather.weather[0].description\n\t\t\t? this.state.weather.weather[0].description\n\t\t\t: ''\n\t\tconst windSpeed = this.state.weather.wind\n\t\t\t? this.state.weather.wind.speed\n\t\t\t: ''\n\t\tconst activePlace = this.state.activePlace;\n\t\tconst feels_like = Math.round(this.state.weather.main.feels_like);\n\n\t\treturn (\n\t\t\t<div className='app'>\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\" >\n\t\t\t\t\t<a className=\"navbar-brand\" href=\"#\">{title}</a>\t\t\t\t\n\t\t\t\t</nav>\n\n\n\t\t\t\t\n\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<Container>\n\t\t\t\t\t <Row>\n\t\t\t\t\t\t\t<Col md={4} sm={4}>\n\t\t\t\t\t\t\t\t<div className='selectHandler'>Select city:</div>\n\t\t\t\t\t\t\t\t<Nav\n\t\t\t\t\t\t\t\t\tbsStyle=\"pills\"\n          \t\t\t\t\t\t\tstacked=\"true\"\n\t\t\t\t\t\t\t\t\tactiveKey={activePlace}\n\t\t\t\t\t\t\t\t\tonSelect={index => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ activePlace: index });\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className=\"btn-group-vertical\">\n\t\t\t\t\t\t\t\t\t{PLACES.map((place, index) => (\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<button key ={index} type=\"button\" className=\"btn btn-primary\" onClick = {e => this.onCityClick(e, place.name)} >{place.name}</button>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t </div>\n\t\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t\t</Col>\n\n\t\t\t\t\t\t\t<Col md={8} sm={8}>\n\t\t\t\t\t\t\t\t<div className='subtitle' id='subtitleHandler'><i>{subtitle}</i></div>\n\t\t\t\t\t\t\t\t<div className='infopanel'>\n\t\t\t\t\t\t\t\t\t<div className='infopanelTemp'>\n\t\t\t\t\t\t\t\t\t\t<div className='summary'><strong>{summary} in {this.state.activePlace}</strong>\n\t\t\t\t\t\t\t\t\t\t<img className='picWithTemp' src={iconUrl} alt={altIcon} /></div>\n\t\t\t\t\t\t\t\t\t\t<div className='flex-row pointer' onClick={this.onDegClick.bind(this)}>Current: {deg}°{this.state.units=='metric' ? 'C':'F' }\n\t\t\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t\t\t<div className='flex-row pointer' onClick={this.onDegClick.bind(this)}>Feels like: {feels_like}°{this.state.units=='metric' ? 'C':'F' } </div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div onClick={this.onDegClick.bind(this)} >Wind Speed: {windSpeed} {this.state.units =='metric' ? 'meter/sec':'miles/hour'}</div>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div id=\"bgndVideo\" class=\"player\" data-property=\"{videoURL:'http://youtu.be/BsekcY04xvQ',containment:'body',autoPlay:true, mute:true, startAt:0, opacity:1}\">My video</div>\n\t\t\t\t\t\t\t\t<div className=\"fullscreen-bg\"> \n\t\t\t\t\t\t\t\t    <video loop muted autoPlay poster=\"img/videoframe.jpg\" class=\"fullscreen-bg__video\"> \n\t\t\t\t\t\t\t\t        <source src=\"https://cdn.flixel.com/flixel/hlhff0h8md4ev0kju5be.hd.mp4\" type=\"video/webm\" /> \n\t\t\t\t\t\t\t\t    </video> \n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\t\t\t\n\n\t\t\t</div>\t\t\n\t\t)\n\t\t\n\t}\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\nclass Footer extends React.Component {\n\trender(){ \n\t\tlet footerText = ' Created by '\n\t\treturn <div className='footer-content'>Click on unit name to change Metric/Imperial system of units. \n\t\t\t{footerText}\n\t\t\t<a href='https://www.facebook.com/shatilovvlad/' target='_blank'> Vlad Shatilov</a>\n\t\t\t<div id=\"footer-logo\">\n\t\t\t\t\t\t\t<a href=\"/\"></a>\n\t\t\t\t\t\t\t<p>Weather app © 2020 . A <a href=\"https://github.com/vladshatilov\">Vlad Shatilov</a> creation</p>\n\t\t\t\t\t\t</div>\n\t\t</div>\n\t}\n}\n\nReactDOM.render(<App/>, document.getElementById('app'));\nReactDOM.render(<Footer/>, document.getElementById('footer'));\n"],"sourceRoot":""}